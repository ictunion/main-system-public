@use "sass:map";
@use 'sass:color';

$colors-light: (
    color0: #000000,
    color1: #211d22,
    color2: #ffffff,
    color3: #0d3945,
    color4: #109AC0,
    color5: #a63ded,
    color6: #00c49f,
    color7: #FF5C93,
);

@function hexToRGB($hex) {
  @return red($hex), green($hex), blue($hex);
}

@mixin generate_colors($colors) {
  // Colors
  @each $color, $value in $colors {
    @if str-slice(#{$value}, 1, 1) == "#" {
      --#{$color}: #{$value};
    } @else {
      --#{$color}: var(--#{$value});
    }
  }

  // RGB Colors
  @each $color, $value in $colors {
    @if str-slice(#{$value}, 1, 1) == "#" {
      --rgb_#{$color}: #{hexToRGB($value)};
    } @else {
      --rgb_#{$color}: var(--rgb_#{$value});
    }
  }
}

:root {
  @include generate_colors($colors-light);
  --page-background: linear-gradient(233deg, rgb(35,152,168) 0%, rgb(0,192,213) 42%, rgb(35,112,168) 100%);
  --secondary-background: linear-gradient(233deg, rgba(56, 152, 190, .5) 0%, rgba(24, 101, 157, .5) 100%);
  --emphasis-light-overlay: rgba(var(--rgb_color2), 0.1);
  --emphasis-dark-overlay: rgba(var(--rgb_color1), 0.2);
  --separator-light-low-emphasis: rgba(var(--rgb_color2), 0.2);
  --separator-light-higher-emphasis: rgba(var(--rgb_color2), 0.4);
  --separator-dark-low-emphasis: rgba(var(--rgb_color1), 0.2);
  --background-color: rgba(var(--rgb_color1), 0.2);
  --mutted-overlay: rgba(var(--rgb_color1), 0.6);
  --background-color: #d7eff2;
  --border-color: #17a6b8;
  --error-color: #{map.get($colors-light, color7)};
  --error-bgcolor: #{color.mix(map.get($colors-light, color7), map.get($colors-light, color2), $weight: 15%)};
}

.root {
    display: flex;
    align-items: stretch;
    height: 100%;
    overflow: hidden;
    background: var(--page-background);
    padding-left: 6px;
}

.main-container {
    flex: 100% 1 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.app-error {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100%;
}
